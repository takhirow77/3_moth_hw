# from aiogram import Bot, Dispatcher, types, executor
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher.storage import FSMContext
# from config import token 
# import logging, sqlite3, time 

# bot = Bot(token=token)
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)
# logging.basicConfig(level=logging.INFO)

# connection = sqlite3.connect('logistics.db')
# cursor = connection.cursor()
# cursor.execute("""CREATE TABLE IF NOT EXISTS users(
#     id INT,
#     first_name VARCHAR(100),
#     last_name VARCHAR(100),
#     phone VARCHAR(100),
#     age INTEGER,
#     created VARCHAR(100)
# );
# """)

# start_buttons = [
#     types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
#     types.KeyboardButton('–®–∞–±–ª–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
# ]
# start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*start_buttons)

# @dp.message_handler(commands='start')
# async def start(message:types.Message):
#     await message.answer("""–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –∫–∞—Ä–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ Geeks Express.

# –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ üá®üá≥

# –° –£–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ Geeks Express :)
# """, reply_markup=start_keyboard)
    
# @dp.message_handler(text="–®–∞–±–ª–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
# async def shablon_register(message:types.Message):
#     await message.reply("""–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–π –∫–∞—Ä–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ:
# 1) –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è
# 2) –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é
# 3) –£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
# –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ +996777223344
# 4) –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç
# –ò –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ :D
# """)

# class RegisterState(StatesGroup):
#     first_name = State()
#     last_name = State()
#     phone = State()
#     age = State()

# @dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
# async def start_register(message:types.Message):
#     await message.answer(f"{message.from_user.full_name} –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
#     await RegisterState.first_name.set()

# @dp.message_handler(state=RegisterState.first_name)
# async def get_user_lastname(message:types.Message, state:FSMContext):
#     await state.update_data(first_name=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
#     await RegisterState.last_name.set()

# @dp.message_handler(state=RegisterState.last_name)
# async def get_user_phone(message:types.Message, state:FSMContext):
#     await state.update_data(last_name=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä:")
#     await RegisterState.phone.set()

# @dp.message_handler(state=RegisterState.phone)
# async def get_user_age(message:types.Message, state:FSMContext):
#     await state.update_data(phone=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
#     await RegisterState.age.set()

# @dp.message_handler(state=RegisterState.age)
# async def end_register_user(message:types.Message, state:FSMContext):
#     await state.update_data(age=message.text)
#     result = await storage.get_data(user=message.from_user.id)
#     await message.answer(f'{result}')

# @dp.message_handler()
# async def not_found(message:types.Message):
#     await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –≤–≤–µ–¥–∏—Ç–µ /start")

# executor.start_polling(dp, skip_updates=True)

